from __future__ import print_function
import httplib2
import logging
import os
import sys

from oauth2client import client
from oauth2client.file import Storage


class PendingMemberEmailHandler():

    def __init__(self, recipient_list=None, pending_user_list=None):
        """
        Constructor for email handler object.
        :param recipient_list: List of recipients (list of string email addresses) to whom we should send reminders
        :param pending_user_list: List of tuples (id, name, email) who are are defined as pending users
        :return:
        """
        self.logger = logging.getLogger(self.__class__.__name__)

        # If modifying these scopes, delete your previously saved credentials
        # at ~/.credentials/gmail-python-quickstart.json
        # TODO: Check the value of this scope.  Was changed from quickstart
        self.scopes = 'https://www.googleapis.com/auth/gmail.readwrite'
        self.client_secret_file = 'pending_member_gmail_client_secret.json'
        self.application_name = 'IW Pending Member Reminder'
        self.logger.debug('SCOPES: [%s]' % self.scopes)
        self.logger.debug('CLIENT_SECRET_FILE: [%s]' % self.client_secret_file)
        self.logger.debug('APPLICATION_NAME: [%s]' % self.application_name)

        self.recipient_list = recipient_list
        if type(recipient_list) == str:
            self.recipient_list = [recipient_list]

        self.pending_user_list = pending_user_list
        if type(pending_user_list) == str:
            self.pending_user_list = [pending_user_list]

        self.logger.debug('Recipient list is size %s' % len(self.recipient_list))
        self.logger.debug('Pending user list is size %s' % len(self.pending_user_list))

    def create_reminder_content(self, num_days):
        """
        Returns the body of an email message to be sent

        :param num_days: Minimum number of days pending users have been waiting
        :param pending_users: List of pending users (tuple of (id, name, email) )
        :return: String, properly formatted body of email
        """

        email_content = """Dear IW Admins,

There are currently %d people who have been waiting at least %d days to be assigned to a local Indivisible Westchester chapter:

%s

Please make sure these individuals are assigned as soon as possible!  Regards - tech@indivisiblewestchester.org


Note: This email was auto-generated by %s.  Remove from cron (or equivalent) to cease.  Contact tech@indivisiblewestchester.org to be removed from list.
""" % (len(self.pending_user_list), num_days, '\n'.join([p[1] + ' (' + p[2] + ')' for p in self.pending_user_list]), sys.argv[0])

        return email_content

    def get_credentials(self):
        """
        Gets valid user credentials from storage.

        If nothing has been stored, or if the stored credentials are invalid,
        the OAuth2 flow is completed to obtain the new credentials.

        Ref: https://developers.google.com/gmail/api/quickstart/python

        Returns:
            Credentials, the obtained credential.
        """
        home_dir = os.path.expanduser('~')
        credential_dir = os.path.join(home_dir, '.credentials')
        if not os.path.exists(credential_dir):
            os.makedirs(credential_dir)
        credential_path = os.path.join(credential_dir,
                                       'pending_member_reminder.json')

        store = Storage(credential_path)
        credentials = store.get()
        if not credentials or credentials.invalid:
            flow = client.flow_from_clientsecrets(self.client_secret_file, self.scopes)
            flow.user_agent = self.application_name
            #if flags:
            #    credentials = tools.run_flow(flow, store, flags)
            self.logger.info('Storing credentials to ' + credential_path)
        return credentials

    def send_reminders(self, num_days):
        """
        Format and send the outgoing message(s) to the intended recipients
        :param num_days: Number of days the pending users have been waiting for an assignment
        :return: True if we have successfully sent the emails, False else
        """

        if not self.recipient_list:
            errmsg = 'No recipient list associated with %s - aborting send' % self.__class__.__name__
            self.logger.error(errmsg)
            raise RuntimeError(errmsg)

        if not self.pending_user_list:
            errmsg = 'No pending user list associated with %s - aborting send' % self.__class__.__name__
            self.logger.error(errmsg)
            raise RuntimeError(errmsg)

        message_content = self.create_reminder_content(num_days)

        # TODO: Actually execute the email send protocol :)
